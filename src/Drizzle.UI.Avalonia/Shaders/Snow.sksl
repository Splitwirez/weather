/*
 * Simple (but not cheap) snow made from multiple parallax layers with randomly positioned flakes and directions.
 * Ported from: https://www.shadertoy.com/view/ldsGDn.
 * Copyright (c) 2013 Andrew Baldwin (Twitter: @baldand, Website: http://thndl.com).
 * License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
 */
 
// Defaults
uniform vec3 u_Resolution;
uniform float u_Time;
uniform vec4 u_Mouse;
// ShaderModel class defaults
uniform float u_Brightness;
uniform float u_Saturation;
// Custom
uniform float u_Speed;
uniform float u_Depth;
uniform float u_Width;
uniform int u_Layers;
uniform float u_PostProcessing;
uniform int u_IsLightning;
uniform int u_IsBlur;
// Textures
uniform shader u_Texture;
uniform vec3 u_TextureResolution;

float S(float a, float b, float t) {
    return smoothstep(a, b, t);
}

float rand(vec2 co) {
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

// Ref: https://stackoverflow.com/questions/9320953/what-algorithm-does-photoshop-use-to-desaturate-an-image
vec3 Desaturate(vec3 color) {
    float bw = (min(color.r, min(color.g, color.b)) + min(color.r, min(color.g, color.b))) * 0.5;
    return vec3(bw, bw, bw);
}

half4 main(vec2 fragCoord) {
    const mat3 p = mat3(13.323122, 23.5112, 21.71123, 21.1212, 28.7312, 11.9312, 21.8112, 14.7212, 61.3934);
    vec2 uv = u_Mouse.xy + vec2(1., u_Resolution.y / u_Resolution.x) * fragCoord.xy / u_Resolution.xy;
    float T = u_Time * u_Speed;
    vec3 acc = vec3(0.0);
    float dof = 5. * sin(T * .1);
    for(int i = 0; i < 201; i++) {
        // TODO: Optimize, preprocess on the cpu side?
        if(i > u_Layers)
            break;

        float fi = float(i);
        vec2 q = uv * (1. + fi * u_Depth);
        q += vec2(q.y * (u_Width * mod(fi * 7.238917, 1.) - u_Width * .5), -0.6 * T / (1. + fi * u_Depth * .03));
        vec3 n = vec3(floor(q), 31.189 + fi);
        vec3 m = floor(n) * .00001 + fract(n);
        vec3 mp = (31415.9 + m) / fract(p * m);
        vec3 r = fract(mp);
        vec2 s = abs(mod(q, 1.) - .5 + .9 * r.xy - .45);
        s += .01 * abs(2. * fract(10. * q.yx) - 1.);
        float d = .6 * max(s.x - s.y, s.x + s.y) + max(s.x, s.y) - .01;
        float edge = .005 + .05 * min(.5 * abs(fi - 5. - dof), 1.);
        acc += vec3(smoothstep(edge, -edge, d) * (r.x / (1. + .02 * fi * u_Depth)));
    }

    // Make sure correct texture fill setting: .ToShader(SKShaderTileMode.Clamp, SKShaderTileMode.Clamp)
    vec2 UV = fragCoord.xy / u_Resolution.xy;
    vec2 scale = u_TextureResolution.xy / u_Resolution.xy;
    float screenAspect = u_Resolution.x / u_Resolution.y;
    float textureAspect = u_TextureResolution.x / u_TextureResolution.y;
    float scaleX = 1., scaleY = 1.;
    if(textureAspect > screenAspect)
        scaleX = screenAspect / textureAspect;
    else
        scaleY = textureAspect / screenAspect;
    UV = vec2(scaleX, scaleY) * (UV - 0.5) + 0.5;

    // Stretch image
    // vec3 col = u_Texture.eval(fragCoord * scale).rgb;
    // Fill image
    vec3 col = u_Texture.eval((UV * u_Resolution.xy * scale) + (u_IsBlur > 0 ? 4. : 0.) * (rand(UV) - 0.5)).rgb;

    // Subtle color shift
    col *= mix(vec3(0.75), vec3(.8, .9, 1.3), u_PostProcessing);

    if(u_IsLightning > 0) {
        // Fade in at the start
        float fade = S(0., 10., u_Time);
        float light = 0.5;
        light *= pow(max(0., sin(u_Time + sin(u_Time) * 2.)), 10.);
        float val = light * fade;
        col = col * (1. + vec3(val * 0.6, val * 0.82, val * 0.9));
    }

    col = u_Saturation < 1. ? mix(Desaturate(col), col, u_Saturation) : col;
    return vec4((vec3(acc) + col) * u_Brightness, 1.);
}
