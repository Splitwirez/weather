/*
 * Parallax depth effect using depthmaps.
 * Created by Dani John (https://github.com/rocksdanister).
 * License: MIT.
 */
 
// Defaults
uniform vec3 u_Resolution;
uniform float u_Time;
uniform vec4 u_Mouse;
// ShaderModel class defaults
uniform float u_Brightness;
uniform float u_Saturation;
// Custom
uniform float u_IntensityX;
uniform float u_IntensityY;
uniform int u_IsBlur;
// Textures
uniform shader u_Texture;
uniform shader u_DepthTexture;
uniform vec3 u_TextureResolution;
uniform vec3 u_DepthTextureResolution;

// Ref: https://stackoverflow.com/questions/9320953/what-algorithm-does-photoshop-use-to-desaturate-an-image
vec4 Desaturate(vec4 color) {
    float bw = (min(color.r, min(color.g, color.b)) + min(color.r, min(color.g, color.b))) * 0.5;
    return vec4(bw, bw, bw, 1.);
}

half4 main(vec2 fragCoord) {
    vec2 uv = fragCoord.xy / u_Resolution.xy;
    vec2 scale = u_TextureResolution.xy / u_Resolution.xy;
    float screenAspect = u_Resolution.x / u_Resolution.y;
    float textureAspect = u_TextureResolution.x / u_TextureResolution.y;
    float scaleX = 1., scaleY = 1.;
    if(textureAspect > screenAspect)
        scaleX = screenAspect / textureAspect;
    else
        scaleY = textureAspect / screenAspect;
    uv = vec2(scaleX, scaleY) * (uv - 0.5) + 0.5;
    uv = uv * u_Resolution.xy * scale;

    float depth = u_DepthTexture.eval(uv).r;
    vec2 parallax = (u_Mouse.xy * u_Resolution.xy) * depth * vec2(u_IntensityX, u_IntensityY);

    vec4 col = vec4(0);

    if (u_IsBlur > 0)
    {
        mat3 kernel = mat3(1., 2., 1., 2., 4., 2., 1., 2., 1.) * 0.0625;
        vec3 direction = vec3(-1., 0., 1.);
        for (int x = 0; x < 3; x++)
        {
            for (int y = 0; y < 3; y++)
            {
                vec2 offset = vec2(direction.x, direction.y) / u_Resolution.xy;
                col += u_Texture.eval(uv + parallax + offset) * kernel[x][y];
            }
        }
    }
    else
    {
        col = u_Texture.eval(uv + parallax);
    }

    col = u_Saturation < 1. ? mix(Desaturate(col), col, u_Saturation) : col;
    return col * u_Brightness;
}
