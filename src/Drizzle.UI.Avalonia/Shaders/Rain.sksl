/*
 * Rain effect shader.
 * Ported from: https://www.shadertoy.com/view/ltffzl.
 * Created by Martijn Steinrucken aka BigWings - 2017 (Twitter: @The_ArtOfCode).
 * License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.
 */
 
// Defaults
uniform vec3      u_Resolution;
uniform float     u_Time;
uniform vec4      u_Mouse;
// ShaderModel class defaults
uniform float u_Brightness;
uniform float u_Saturation;
// Custom
uniform float u_Speed;
uniform float u_Intensity;
uniform float u_Zoom;
uniform float u_Normal;
uniform float u_PostProcessing;
uniform int u_IsPanning;
uniform int u_IsFreezing;
uniform int u_IsLightning;
uniform int u_IsRandomN14;
// Textures
uniform vec3 u_TextureResolution;
uniform shader u_Texture;

//#define S(a, b, t) smoothstep(a, b, t)
//#define USE_POST_PROCESSING
//#define CHEAP_NORMALS

float S(float a, float b, float t)
{
    return smoothstep(a, b, t);
}

vec3 N13(float p) {
    //  from DAVE HOSKINS
    vec3 p3 = fract(vec3(p) * vec3(.1031, .11369, .13787));
    p3 += dot(p3, p3.yzx + 19.19);
    return fract(vec3((p3.x + p3.y) * p3.z, (p3.x + p3.z) * p3.y, (p3.y + p3.z) * p3.x));
}

vec4 N14(float t) {
    return fract(sin(t * vec4(123., 1024., 1456., 264.)) * vec4(6547., 345., 8799., 1564.));
}

float N(float t) {
    return fract(sin(t * 12345.564) * 7658.76);
}

float Saw(float b, float t) {
    return S(0., b, t) * S(1., b, t);
}

vec2 DropLayer2(vec2 uv, float t) {
    vec2 UV = uv;

    uv.y += t * 0.75;
    vec2 a = vec2(6., 1.);
    vec2 grid = a * 2.;
    vec2 id = floor(uv * grid);

    float colShift = N(id.x);
    uv.y += colShift;

    id = floor(uv * grid);
    vec3 n = N13(id.x * 35.2 + id.y * 2376.1);
    vec2 st = fract(uv * grid) - vec2(.5, 0);

    float x = n.x - .5;

    float y = UV.y * 20.;
    float wiggle = sin(y + sin(y));
    x += wiggle * (.5 - abs(x)) * (n.z - .5);
    x *= .7;
    float ti = fract(t + n.z);
    y = (Saw(.85, ti) - .5) * .9 + .5;
    vec2 p = vec2(x, y);

    float d = length((st - p) * a.yx);

    float mainDrop = S(.4, .0, d);

    float r = sqrt(S(1., y, st.y));
    float cd = abs(st.x - x);
    float trail = S(.23 * r, .15 * r * r, cd);
    float trailFront = S(-.02, .02, st.y - y);
    trail *= trailFront * r * r;

    y = UV.y;
    float trail2 = S(.2 * r, .0, cd);
    float droplets = max(0., (sin(y * (1. - y) * 120.) - st.y)) * trail2 * trailFront * n.z;
    y = fract(y * 10.) + (st.y - .5);
    float dd = length(st - vec2(x, y));
    droplets = S(.3, 0., dd);
    float m = mainDrop + droplets * r * trailFront;

    //m += st.x>a.y*.45 || st.y>a.x*.165 ? 1.2 : 0.;
    return vec2(m, trail);
}

float StaticDrops(vec2 uv, float t) {
    uv *= 40.;

    vec2 id = floor(uv);
    uv = fract(uv) - .5;

    vec3 n = u_IsRandomN14 > 0 ? N14(id.x * 10. + id.y).xyz : N13(id.x * 107.45 + id.y * 3543.654);
    vec2 p = (n.xy - .5) * .7;
    float d = length(uv - p);

    float fade = Saw(.025, fract(t + n.z));
    float c = S(.3, 0., d) * fract(n.z * 10.) * fade;
    return c;
}

vec2 Drops(vec2 uv, float t, float l0, float l1, float l2) {
    float s = StaticDrops(uv, t) * l0;
    vec2 m1 = DropLayer2(uv, t) * l1;
    vec2 m2 = DropLayer2(uv * 1.85, t) * l2;

    float c = s + m1.x + m2.x;
    c = S(.3, 1., c);

    return vec2(c, max(m1.y * l0, m2.y * l1));
}

//random no.
float N21(vec2 p) {
    p = fract(p * vec2(123.34, 345.45));
    p += dot(p, p + 34.345);
    return fract(p.x * p.y);
}

// Ref: https://stackoverflow.com/questions/9320953/what-algorithm-does-photoshop-use-to-desaturate-an-image
vec3 Desaturate(vec3 color) {
    float bw = (min(color.r, min(color.g, color.b)) + min(color.r, min(color.g, color.b))) * 0.5;
    return vec3(bw, bw, bw);
}

float rand(vec2 co) {
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

half4 main(vec2 fragCoord) {
    vec2 uv = -1 * u_Mouse.xy + -1 *(fragCoord.xy - .5 * u_Resolution.xy) / u_Resolution.y;
    vec2 UV = fragCoord.xy / u_Resolution.xy;
    float T = u_Time;

    // Make sure correct texture fill setting: .ToShader(SKShaderTileMode.Clamp, SKShaderTileMode.Clamp)
    vec2 scale = u_TextureResolution.xy / u_Resolution.xy;
    float screenAspect = u_Resolution.x / u_Resolution.y;
    float textureAspect = u_TextureResolution.x / u_TextureResolution.y;
    float scaleX = 1., scaleY = 1.;
    if(textureAspect > screenAspect)
        scaleX = screenAspect / textureAspect;
    else
        scaleY = textureAspect / screenAspect;
    UV = vec2(scaleX, scaleY) * (UV - 0.5) + 0.5;
    // Stretch image
    // vec3 col = u_texture.eval(fragCoord * scale).rgb;

    float t = T * .2 * u_Speed;

    float view = u_IsPanning > 0 ? -cos(T * .2) : 0.;
    uv *= (.7 + view * .3) * u_Zoom;

    float staticDrops = S(-.5, 1., u_Intensity) * 2.;
    float layer1 = S(.25, .75, u_Intensity);
    float layer2 = S(.0, .5, u_Intensity);

    vec2 c = Drops(uv, t, staticDrops, layer1, layer2);
    vec2 e = vec2(.001, 0.) * u_Normal;
    float cx = Drops(uv + e, t, staticDrops, layer1, layer2).x;
    float cy = Drops(uv + e.yx, t, staticDrops, layer1, layer2).x;
    vec2 n = vec2(cx - c.x, cy - c.x);

    vec3 col = u_Texture.eval(((UV + n) * u_Resolution.xy * scale) + (u_IsFreezing > 0 ? 4. : 0.) * (rand(UV) - 0.5)).rgb;
    //vec4 texCoord = vec4(UV.x + n.x, UV.y + n.y, 0, 1.0 * 25. * 0.01 / 7.);

    // Subtle color shift
    col *= mix(vec3(1.), vec3(.8, .9, 1.3), u_PostProcessing);

    if (u_IsLightning > 0)
    {
        // Fade in at the start
        float fade = S(0., 10., u_Time);
        float light = 0.5;
        light *= pow(max(0., sin(u_Time + sin(u_Time) * 2.)), 10.);
        float val = light * fade;
        col = col * (1. + vec3(val * 0.6, val * 0.82, val * 0.9));
    }
    UV -= .5;
    // Vignette
    col *= 1 - dot(UV, UV) * 1.;

    col = u_Saturation < 1. ? mix(Desaturate(col), col, u_Saturation) : col;
    return vec4(col * 0.9 * u_Brightness, 1.0);
}
